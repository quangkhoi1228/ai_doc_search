CÁC BẬC ĐÁNH GIÁ THUẬT TOÁN
Cho một thuật toán A thực hiện trên dữ liệu đầu vào
có kích thước n. Chi phí về thời gian để thực hiện
giải thuật này là f(n). Khi đó, độ phức tạp tính toán
của thuật toán có thể được ước lượng theo các bậc
như sau:
* Bậc Big-O (Ô lớn)
- Độ phức tạp của thuật toán A là O(g(n)) nếu tồn tại
các hằng số c>0, n0
>0 sao cho
f(n) ≤ c.g(n)  n ≥ n0

- Bậc Big-O thường được sử dụng trong đánh giá
độ phức tạp tính toán của thuật toán để ước lượng
độ phức tạp không thể cao hơn của thuật toán. Hàm
g(n) được gọi là giới hạn trên của f(n).
- Lưu ý: nếu độ phức tạp tính toán của thuật toán
A là O(g(n)), thì độ phức tạp của thuật toán A cũng
là O(h(n)) với h(n) là giới hạn trên của g(n)

* Bậc Big-Omega (Ômêga lớn)
- Độ phức tạp của thuật toán A là Omega(g(n)) nếu tồn tại
các hằng số c>0, n0
>0 sao cho
f(n) ≥ c.g(n) Omega n ≥ n0

- Bậc Big-Omega dùng để ước lượng độ phức tạp không
thể thấp hơn của thuật toán. Hàm g(n) được gọi là
giới hạn dưới của f(n).
- Lưu ý: nếu độ phức tạp tính toán của thuật toán
A là Omega(g(n)), thì độ phức tạp của thuật toán A cũng
là Omega(h(n)) với h(n) là giới hạn dưới của g(n).

* Bậc Big-Teta (Têta lớn)
- Độ phức tạp của thuật toán A là Teta(g(n)) nếu tồn tại
các hằng số c0>0, c1>0, n0>0 sao cho
c0.g(n) ≤ f(n) ≤ c1.g(n) với mọi n ≥ n0
- Bậc Big-Teta dùng để ước lượng độ phức tạp tương
đương của thuật toán. Hàm g(n) được gọi là giới
hạn chặt của f(n).

* Một số tính chất
- Nếu thuật toán A có số phép tính dựa trên kích thước
đầu vào n là một đa thức P(n) bậc k, khi đó, độ phức tạp
tính toán của A là có thể là O(nk), Omega(nk), Teta(nk).
- Nếu thuật toán A có số phép tính dựa trên kích thước
đầu vào n là logaf(n),do logaf(n)=logab.logbf(n)
nên độ phức tạp tính toán của A có thể ghi là O(log f(n))
mà không cần ghi cơ số. Điều này cũng đúng với bậc
Omega và Teta.

* Một số tính chất
- Nếu thuật toán A có hai công việc liên tiếp nhau
T1 và T2 lần lượt có độ phức tạp là O(f(n)) và
O(g(n)) thì độ phức tạp của A: O(max(f(n),g(n))).
- Nếu thuật toán A có hai công việc T1 lồng T2, T1
và T2 lần lượt có độ phức tạp là O(f(n)) và O(g(n))
thì độ phức tạp của A: O(f(n).g(n)).

* Nhận xét:
- Trong các ký pháp để đánh giá thuật toán, Bậc
Big-Teta thể hiện độ phức tạp tính toán tốt nhất
- Trong những trường hợp không thể xác định
được giới hạn chặt của hàm số biễu diễn số lượng
phép tính của thuật toán, người ta thường dùng bậc
Big-O để thể hiện độ phức tạp tính toán.
- Khi đánh giá thuật toán, người ta sử dụng hàm
giới hạn g(n) đơn giản và sát với f(n) nhất có thể
